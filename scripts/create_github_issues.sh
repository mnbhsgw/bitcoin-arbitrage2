#!/bin/bash

# 修正版 GitHub Issues作成スクリプト
# 全14個のイシューを作成します（存在するラベルのみ使用）
#
# 使用方法:
#   ./create_all_issues_fixed.sh                    # デフォルトリポジトリを使用
#   ./create_all_issues_fixed.sh owner/repo-name    # 引数でリポジトリを指定
#   GITHUB_REPO=owner/repo-name ./create_all_issues_fixed.sh  # 環境変数で指定
#
# 前提条件:
#   - GitHub CLI (gh) がインストール済み
#   - GitHub CLI で認証済み (gh auth login)

# リポジトリ名を引数または環境変数から取得（デフォルト値あり）
REPO="${1:-${GITHUB_REPO:-mnbhsgw/bitcoin-arbitrage2}}"

echo "=== Bitcoin Arbitrage - GitHub Issues Creator (修正版) ==="
echo "リポジトリ: $REPO"
echo "合計12個の新しいイシューを作成します"
echo ""

# 確認
read -p "イシューを作成しますか？ (y/N): " confirm
if [[ $confirm != [yY] ]]; then
    echo "キャンセルされました"
    exit 0
fi

echo "イシューを作成中..."
echo ""

# Issue 1: TypeScript導入
echo "Creating Issue 1/12: TypeScript導入..."
gh issue create --repo $REPO --title "🚀 TypeScript導入による型安全性の向上" --label "enhancement" --body "$(cat <<'EOF'
## 概要
JavaScript環境での型安全性不足により、実行時エラーのリスクが存在します。TypeScriptの段階的導入を提案します。

## 現在の問題
- 型チェックが実行時まで行われない
- APIレスポンス構造の変更に対する脆弱性
- リファクタリング時の安全性不足

## 提案する解決策
### フェーズ1: 設定とインフラ
- [ ] TypeScript設定ファイル(`tsconfig.json`)の追加
- [ ] 必要なTypeScript依存関係のインストール
- [ ] ビルドスクリプトの更新

### フェーズ2: 型定義の追加
- [ ] 取引所APIレスポンス型の定義
- [ ] データベースモデル型の定義
- [ ] WebSocketメッセージ型の定義

### フェーズ3: 段階的移行
- [ ] `utils.js` → `utils.ts`
- [ ] `fees.js` → `fees.ts`
- [ ] `exchanges.js` → `exchanges.ts`
- [ ] その他のモジュール

## 受け入れ条件
- [ ] TypeScript設定が完了している
- [ ] 少なくとも1つのモジュールがTypeScriptに移行済み
- [ ] 型チェックが開発フローに組み込まれている
- [ ] 既存機能に回帰がない

## 優先度
Medium - 長期的なメンテナンス性向上のため
EOF
)"

# Issue 2: リアルタイム価格履歴グラフの強化
echo "Creating Issue 2/12: リアルタイム価格履歴グラフの強化..."
gh issue create --repo $REPO --title "📈 リアルタイム価格履歴グラフの強化" --label "enhancement" --body "$(cat <<'EOF'
## 概要
現在の価格チャート機能を拡張し、より詳細な時系列データの可視化を実現します。

## 現在の制限
- 基本的なチャート機能のみ (`client/src/App.js:139`)
- 履歴データの表示が限定的
- インタラクティブな機能不足

## 提案する改善
1. Chart.jsまたはD3.jsを使用した高機能チャート
2. 時間範囲選択機能（1時間、6時間、24時間、1週間）
3. 複数取引所の価格を同時表示
4. アービトラージ機会のハイライト表示
5. ズーム・パン機能

## 受け入れ条件
- [ ] インタラクティブなチャートが実装されている
- [ ] 時間範囲選択機能が動作する
- [ ] 複数取引所の価格が同時表示される
- [ ] レスポンシブデザインに対応している

## 優先度
Medium - ユーザビリティの大幅向上
EOF
)"

# Issue 3: アラート機能の追加
echo "Creating Issue 3/12: アラート機能の追加..."
gh issue create --repo $REPO --title "🔔 アラート機能の追加" --label "enhancement" --body "$(cat <<'EOF'
## 概要
アービトラージ機会を見逃さないためのアラート機能を追加します。

## 提案する機能
1. ブラウザ通知
   - 設定可能な利益率閾値
   - 音声アラート
2. メール通知
   - SMTP設定
   - テンプレート化されたメール
3. Webhook/Slack連携
   - カスタムメッセージ形式
   - チャンネル設定

## 実装アプローチ
- フロントエンド: Notification API
- バックエンド: nodemailer, slack-webhook
- 設定UI: ユーザー設定画面

## 受け入れ条件
- [ ] ブラウザ通知が動作する
- [ ] アラート設定UIが実装されている
- [ ] 少なくとも1つの外部通知方法が動作する
- [ ] 通知の頻度制限機能がある

## 優先度
High - 実用性の大幅向上
EOF
)"

# Issue 4: 設定可能な閾値システム
echo "Creating Issue 4/12: 設定可能な閾値システム..."
gh issue create --repo $REPO --title "⚙️ 設定可能な閾値システム" --label "enhancement" --body "$(cat <<'EOF'
## 概要
現在0.1%で固定されているアービトラージ検出閾値を動的に設定可能にします。

## 現在の制限
- 閾値が`server/arbitrage.js:7`で固定
- ユーザーの投資戦略に合わせられない
- 市場状況に応じた調整ができない

## 提案する機能
1. ユーザー設定UI
2. 取引所ペアごとの個別閾値設定
3. 時間帯別閾値設定
4. 履歴データに基づく推奨閾値
5. API経由での動的変更

## 実装詳細
- 設定データベーステーブル
- 設定管理API
- フロントエンド設定画面
- リアルタイム設定反映

## 受け入れ条件
- [ ] 閾値設定UIが実装されている
- [ ] 設定がリアルタイムで反映される
- [ ] 取引所ペアごとの設定が可能
- [ ] 設定の永続化が動作する

## 優先度
Medium - カスタマイズ性の向上
EOF
)"

# Issue 5: API レート制限対応の強化
echo "Creating Issue 5/12: API レート制限対応の強化..."
gh issue create --repo $REPO --title "🛡️ API レート制限対応の強化" --label "enhancement" --body "$(cat <<'EOF'
## 概要
取引所APIの制限に対する対策を強化し、安定した価格取得を実現します。

## 現在の問題
- 簡単なtimeout設定のみ (`server/exchanges.js:18`)
- レート制限によるAPI失敗への対応不足
- リトライ機能がない

## 提案する改善
1. Exponential backoff実装
2. レート制限検出とスマートリトライ
3. 取引所ごとの制限値設定
4. フォールバック戦略
5. 監視とアラート

## 実装詳細
- `retry`ライブラリの導入
- 取引所固有の制限設定
- ログ監視機能
- ヘルスチェックエンドポイント

## 受け入れ条件
- [ ] Exponential backoffが実装されている
- [ ] レート制限エラーが適切に処理される
- [ ] リトライ機能が動作する
- [ ] 監視ダッシュボードでAPI状態が確認できる

## 優先度
High - サービス安定性に重要
EOF
)"

# Issue 6: データベース最適化
echo "Creating Issue 6/12: データベース最適化..."
gh issue create --repo $REPO --title "🔍 データベース最適化" --label "enhancement" --body "$(cat <<'EOF'
## 概要
データベースのパフォーマンスを向上させるため、インデックス設計とクエリ最適化を行います。

## 現在の問題
- 価格履歴テーブルにインデックス不足
- 大量データでの検索性能低下
- アービトラージ履歴の効率的な検索ができない

## 提案する改善
1. 適切なインデックス設計
   - timestamp カラム
   - exchange + timestamp 複合インデックス
2. クエリ最適化
3. データアーカイブ戦略
4. パフォーマンス監視

## 実装詳細
- マイグレーションスクリプト作成
- スロークエリログ監視
- データベース圧縮戦略

## 受け入れ条件
- [ ] 適切なインデックスが作成されている
- [ ] 価格履歴検索が高速化されている
- [ ] データアーカイブ機能が動作する
- [ ] パフォーマンス監視が設定されている

## 優先度
Medium - 長期運用での重要性
EOF
)"

# Issue 7: WebSocket接続安定性の向上
echo "Creating Issue 7/12: WebSocket接続安定性の向上..."
gh issue create --repo $REPO --title "🔌 WebSocket接続安定性の向上" --label "enhancement" --body "$(cat <<'EOF'
## 概要
WebSocket接続の安定性を向上させ、より堅牢な再接続メカニズムを実装します。

## 現在の問題
- 基本的な再接続ロジックのみ (`client/src/App.js:39`)
- ネットワーク変更時の対応不足
- 接続状態の詳細な監視不足

## 提案する改善
1. 指数バックオフ再接続
2. 接続品質監視
3. ハートビート機能
4. オフライン検出
5. 接続状態の詳細表示

## 実装詳細
- WebSocket状態管理の強化
- ping/pong メッセージ
- ネットワーク状態API利用
- 接続統計の表示

## 受け入れ条件
- [ ] 安定した再接続が動作する
- [ ] 接続品質が監視されている
- [ ] オフライン状態が適切に表示される
- [ ] ハートビート機能が動作する

## 優先度
High - リアルタイム機能の信頼性
EOF
)"

# Issue 8: ログ監視機能の強化
echo "Creating Issue 8/12: ログ監視機能の強化..."
gh issue create --repo $REPO --title "📊 ログ監視機能の強化" --label "enhancement" --body "$(cat <<'EOF'
## 概要
構造化ログとモニタリングダッシュボードを導入し、運用監視を強化します。

## 現在の問題
- 基本的なconsole.logのみ
- ログの構造化不足
- 監視ダッシュボードがない
- エラー追跡の困難

## 提案する改善
1. Winston導入による構造化ログ
2. ログレベル管理
3. 監視ダッシュボード
4. アラート機能
5. ログローテーション

## 実装詳細
- Winston + ELK Stack
- Prometheusメトリクス
- Grafanaダッシュボード
- エラー通知システム

## 受け入れ条件
- [ ] 構造化ログが実装されている
- [ ] ログレベルが適切に設定されている
- [ ] 監視ダッシュボードが動作する
- [ ] 重要なエラーでアラートが発生する

## 優先度
Medium - 運用効率の向上
EOF
)"

# Issue 9: API バージョニング
echo "Creating Issue 9/12: API バージョニング..."
gh issue create --repo $REPO --title "🔄 API バージョニング" --label "enhancement" --body "$(cat <<'EOF'
## 概要
APIのバージョン管理機能を追加し、後方互換性を保ちながら機能拡張を可能にします。

## 現在の問題
- APIのバージョン管理機能がない
- 破壊的変更時の影響大
- 段階的な機能展開ができない

## 提案する改善
1. `/api/v1/`形式での版数管理
2. 複数バージョンの同時サポート
3. バージョン非推奨ポリシー
4. APIドキュメント自動生成

## 実装詳細
- Express Router構造の変更
- OpenAPI/Swagger統合
- バージョン管理ミドルウェア
- 非推奨警告システム

## 受け入れ条件
- [ ] v1 APIが動作する
- [ ] 複数バージョンが同時サポートされる
- [ ] APIドキュメントが自動生成される
- [ ] 非推奨警告が適切に表示される

## 優先度
Low - 将来の拡張性のため
EOF
)"

# Issue 10: マルチユーザー対応
echo "Creating Issue 10/12: マルチユーザー対応..."
gh issue create --repo $REPO --title "👥 マルチユーザー対応" --label "enhancement" --body "$(cat <<'EOF'
## 概要
現在の単一ユーザー認証を拡張し、複数ユーザーとロールベースアクセス制御を実装します。

## 現在の制限
- 単一ユーザー認証のみ (`server/auth.js`)
- ユーザー管理機能なし
- ロール管理なし

## 提案する機能
1. ユーザー登録・管理
2. ロールベースアクセス制御
3. ユーザー固有設定
4. アクセスログ
5. 管理者ダッシュボード

## 実装詳細
- ユーザーテーブル設計
- パスワードハッシュ化強化
- JWTトークン管理改善
- 権限チェックミドルウェア

## 受け入れ条件
- [ ] ユーザー登録機能が動作する
- [ ] ロールベースアクセス制御が実装されている
- [ ] ユーザー固有設定が保存される
- [ ] 管理者機能が動作する

## 優先度
Low - 複数ユーザー環境での運用時
EOF
)"

# Issue 11: E2Eテスト強化
echo "Creating Issue 11/12: E2Eテスト強化..."
gh issue create --repo $REPO --title "🧪 E2Eテスト強化" --label "enhancement" --body "$(cat <<'EOF'
## 概要
フロントエンド統合テストを強化し、ユーザーシナリオのテスト自動化を実現します。

## 現在の制限
- フロントエンド統合テストが限定的
- ユーザーワークフローのテストなし
- ブラウザ互換性テストなし

## 提案する改善
1. Cypress/Playwright導入
2. 主要ユーザーシナリオのテスト
3. ブラウザ互換性テスト
4. ビジュアルリグレッションテスト
5. CI/CD統合

## テストシナリオ
- ログイン→価格表示→アービトラージ検出
- WebSocket接続・再接続
- アラート設定・通知
- データエクスポート機能

## 受け入れ条件
- [ ] E2Eテストが実装されている
- [ ] 主要シナリオがテストされている
- [ ] CI/CDパイプラインに統合されている
- [ ] テストレポートが生成される

## 優先度
Medium - 品質保証の向上
EOF
)"

# Issue 12: パフォーマンステスト強化
echo "Creating Issue 12/12: パフォーマンステスト強化..."
gh issue create --repo $REPO --title "⚡ パフォーマンステスト強化" --label "enhancement" --body "$(cat <<'EOF'
## 概要
現在の基本的な負荷テストを強化し、実運用環境に近い条件でのテストを実現します。

## 現在の制限
- 基本レベルの負荷テスト (`tests/performance/`)
- 実環境に近いテストシナリオ不足
- パフォーマンス回帰検出なし

## 提案する改善
1. 段階的負荷テスト
2. WebSocket負荷テスト
3. データベース負荷テスト
4. メモリ・CPU使用量監視
5. パフォーマンス基準値設定

## 実装詳細
- k6またはArilleryの導入
- 監視メトリクス拡張
- パフォーマンス回帰検出
- 継続的パフォーマンステスト

## 受け入れ条件
- [ ] 段階的負荷テストが実装されている
- [ ] WebSocket負荷テストが動作する
- [ ] パフォーマンス基準が設定されている
- [ ] 回帰検出機能が動作する

## 優先度
Medium - 運用安定性の保証
EOF
)"

echo ""
echo "=== 完了 ==="
echo "全12個の新しいイシューが正常に作成されました！"
echo "GitHub上で確認してください: https://github.com/$REPO/issues"